#!/usr/bin/env python
import random
import rospy
from geometry_msgs.msg import Twist
from sensor_msgs.msg import Range

MINICAR_MAX_LIN_VEL = 1
MINICAR_MAX_ANG_VEL = 2
VEL_STEP = 0.05

IR_TARGET_RANGE = 0.34
LOW_RANGE_COUNTER_LIMIT = 50

LEFT_IR_SENSOR = 'ir_sensor_front_0'
CENTER_IR_SENSOR = 'ir_sensor_front_1'
RIGHT_IR_SENSOR = 'ir_sensor_front_2'

LEFT_IR_TOPIC = '/myrobot/sensor/front_0'
CENTER_IR_TOPIC = '/myrobot/sensor/front_1'
RIGHT_IR_TOPIC = '/myrobot/sensor/front_2'

class AutoTeleop:
    def __init__(self):
        rospy.init_node('auto_teleop')

        cmd_vel_topic = rospy.get_param('/auto_teleop/cmd_vel', '/cmd_vel')
        rospy.loginfo('Cmd Vel topic: ' + cmd_vel_topic)

        self.pub = rospy.Publisher(cmd_vel_topic, Twist, queue_size=10)
        
        self.forward_state = False
        self.back_state = False
        self.left_state = False
        self.right_state = False

        self.key_state_lin = 0
        self.key_state_ang = 0
        self.target_linear_vel = 0.0
        self.target_angular_vel = 0.0

        self.range_left = 0
        self.range_center = 0
        self.range_right = 0

        self.low_range_counter = 0

        self.subscriber_left = None
        self.subscriber_center = None
        self.subscriber_right = None

    def run(self):
        self.subscriber_left = rospy.Subscriber(LEFT_IR_TOPIC, Range, callback=self.range_left_callback)
        self.subscriber_center = rospy.Subscriber(CENTER_IR_TOPIC, Range, callback=self.range_center_callback)
        self.subscriber_right = rospy.Subscriber(RIGHT_IR_TOPIC, Range, callback=self.range_right_callback)
        rate = rospy.Rate(10)
        try:
            while not rospy.is_shutdown():
                self.update_state()
                rate.sleep()
        except rospy.ROSInterruptException:
            pass
        self.keyboard_listener.stop()
        self.keyboard_listener.join()

    def update_state(self):
        self.update_range()
        self.update_speed()
        twist = Twist()
        twist.linear.x = self.target_linear_vel; twist.linear.y = 0.0; twist.linear.z = 0.0
        twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = self.target_angular_vel
        self.pub.publish(twist)

    def update_range(self):
        if self.range_left < IR_TARGET_RANGE or self.range_center < IR_TARGET_RANGE or self.range_right < IR_TARGET_RANGE:
            self.low_range_counter += 1
        else:
            self.low_range_counter = 0

        self.forward_state = self.range_center > IR_TARGET_RANGE

        if self.range_left < IR_TARGET_RANGE or self.range_right < IR_TARGET_RANGE:
            self.left_state = self.range_left > self.range_right
            self.right_state = not self.left_state
        else:
            self.left_state = False
            self.right_state = False

        if self.low_range_counter > LOW_RANGE_COUNTER_LIMIT:
            self.forward_state = False
            self.back_state = True
            self.left_state = bool(random.getrandbits(1))
            self.right_state = not self.left_state
        else:
            self.back_state = False

    def update_speed(self):
        if self.forward_state and self.back_state:
            self.key_state_lin = 0
        elif self.forward_state:
            self.key_state_lin = min(max(0, self.key_state_lin + VEL_STEP), 1)
        elif self.back_state:
            self.key_state_lin = max(min(0, self.key_state_lin - VEL_STEP), -1)
        else:
            self.key_state_lin = 0

        if self.left_state and self.right_state:
            self.key_state_ang = 0
        elif self.left_state:
            self.key_state_ang = 1
        elif self.right_state:
            self.key_state_ang = -1
        else:
            self.key_state_ang = 0

        self.target_linear_vel = MINICAR_MAX_LIN_VEL * self.key_state_lin
        self.target_angular_vel = MINICAR_MAX_ANG_VEL * self.key_state_ang

    def range_left_callback(self, msg):
        self.range_left = msg.range

    def range_center_callback(self, msg):
        self.range_center = msg.range

    def range_right_callback(self, msg):
        self.range_right = msg.range

if __name__=="__main__":
    teleop = AutoTeleop()
    teleop.run()